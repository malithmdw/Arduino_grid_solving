package javaapplication1;

/**
 *
 * @author malith
 */
public class JavaApplication1 {
        int ar2d1[][]=
        {
            {1,1,1,1,1,1,1,1,1,1},
            {1,1,1,1,1,1,1,1,1,1},
            {1,1,1,1,1,1,1,1,1,1},
            {1,1,1,1,1,1,1,1,1,1},
            {1,1,1,1,1,1,1,1,1,1},
            {1,0,0,1,1,0,1,1,0,1},
            {1,0,1,1,1,0,1,1,0,1},
            
        };
        /*{
           {1,1,1,1,1,1,0,1,0,1},
           {0,0,0,0,0,0,1,1,1,1},
           {1,0,0,1,1,1,1,0,0,1},
           {1,0,1,1,0,1,0,0,0,1},
           {1,1,1,0,0,1,0,1,0,1},
           {1,0,0,0,1,1,1,0,0,1},
           {1,0,0,0,1,0,1,0,0,1}
        };*/
        int arrsubpath1[]={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	static int k=1;

        int r=0;
	int s=0;
        
        int stops=0;
        
    public static void main(String[] args) {
        k=1;
        JavaApplication1 pa=new JavaApplication1();
        pa.mysubpathR(6,7,6,4);
        pa.print();
        pa.returnfromsubpath();
        
    }
void print(){
    for(int x=0;x<40;x++){
        System.out.print(arrsubpath1[x]); 
    } 
    System.out.println("");
}  
int mysubpathR(int r,int s,int t,int u){
    if(r==t && s==u){
        stops=1;
      return 0;  
    }
    int rightexist=1;
    int downexist=1;
    int upexist=1;
    int backexist=1;
    if(s == 9){rightexist=0;}
    if(r == 6){downexist=0;}
    if(r == 0){upexist=0;}
    if(s == 0){backexist=0;}
    
    if(stops==1){
        return 0;
    }else{
        if(downexist==1 && arrsubpath1[k-1] != 4 && stops==0){            
            if(ar2d1[r+1][s]==1){
                if(arrsubpath1[k-1]==1 && arrsubpath1[k-2]==4 && arrsubpath1[k-3]==3 && arrsubpath1[k-4]==2){// a cycle
                    ar2d1[r+1][s-1]=0;                    
                    k=k-4;
                }else{
                    arrsubpath1[k]=2;
                    k=k+1;
                    mysubpathR(r+1,s,t,u); 
                }
            }  
        }
        if(rightexist==1 && arrsubpath1[k-1] != 3 && stops==0){
            if(ar2d1[r][s+1]==1){
                if(arrsubpath1[k-1]==4 && arrsubpath1[k-2]==3 && arrsubpath1[k-3]==2 && arrsubpath1[k-4]==1){// a cycle
                    ar2d1[r+1][s+1]=0;                    
                    k=k-4;
                }else{
                    arrsubpath1[k]=1;
                    k=k+1;
                    mysubpathR(r,s+1,t,u); 
                }                               
            }  
        }
        if(backexist==1 && arrsubpath1[k-1] != 1 && stops==0){
            if(ar2d1[r][s-1]==1){
                if(arrsubpath1[k-1]==4 && arrsubpath1[k-2]==1 && arrsubpath1[k-3]==2 && arrsubpath1[k-4]==3){// a cycle
                    ar2d1[r-1][s-1]=0;                    
                    k=k-4;
                }else{
                    arrsubpath1[k]=3;
                    k=k+1;
                    mysubpathR(r,s-1,t,u);
                }
            }  
        }        
        if(upexist==1 && arrsubpath1[k-1] != 2 && stops==0){
            if(ar2d1[r-1][s]==1){
                arrsubpath1[k]=4;
                k=k+1;
                mysubpathR(r-1,s,t,u);
               
            }  
        }
        
        if(stops==0){
            ar2d1[r][s]=0;
            k=k-1;
            switch(arrsubpath1[k]){
                case 1:mysubpathR(r,s-1,t,u);//>
                case 2:mysubpathR(r-1,s,t,u);//v
                case 3:mysubpathR(r,s+1,t,u);//<
                case 4:mysubpathR(r+1,s,t,u);//^
            }
        }
    }    
    return 0;
}


void returnfromsubpath(){
  int count=0;
  for(int i=1;i<25;i++){
    if(arrsubpath1[i]==0){
        break;
    }
    switch(arrsubpath1[i]){
        case 1:arrsubpath1[i]=3;break;
        case 2:arrsubpath1[i]=4;break;
        case 3:arrsubpath1[i]=1;break;
        case 4:arrsubpath1[i]=2;break;
    }
    count=count+1;
  }
  if(count%2==0){
    for(int i=1;i<(count/2)+1;i++){
        int temp=arrsubpath1[i];
        arrsubpath1[i]=arrsubpath1[count-i+1];
        arrsubpath1[count-i+1]=temp;
    }
  }else{
     for(int i=1;i<((count-1)/2)+1;i++){
        int temp=arrsubpath1[i];
        arrsubpath1[i]=arrsubpath1[count-i+1];
        arrsubpath1[count-i+1]=temp;
    } 
  }

  print();

}


}